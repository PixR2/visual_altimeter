/*#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <sensor_msgs/Imu.h>
#include <geometry_msgs/PoseStamped.h>

#include <image_transport/subscriber_filter.h>

#include <message_filters/subscriber.h>
#include <message_filters/synchronizer.h>
#include <message_filters/sync_policies/approximate_time.h>
#include <message_filters/cache.h>

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/contrib/contrib.hpp>

#include <cv_bridge/cv_bridge.h>

#include <Eigen/Geometry> 
#include <stdio.h>

#include <sensor_msgs/PointCloud.h>
#include <cmath>

#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <pcl/common/transforms.h>*/

/*int sample_radius = 4;

ros::Publisher visual_height_pub_;
ros::Publisher lot_pose_pub_;
ros::Publisher plane_points_pub_;
ros::Publisher plane_points_transformed_pub_;

message_filters::Cache<sensor_msgs::Imu> imu_message_cache(10);

std_msgs::Header header_;

Eigen::ParametrizedLine<double, 3> lot;

// Move to 3 input callback??
void simple_plane_callback(const sensor_msgs::ImageConstPtr& imageDepthMsg,
		   const sensor_msgs::CameraInfoConstPtr& camInfoMsg)
{
    // Use pcl::getTransformation and custom Message: float roll, pitch, yaw.
	const sensor_msgs::Imu::ConstPtr imu_msg = imu_message_cache.getElemBeforeTime(ros::Time::now());
	if(imu_msg != NULL) 
	{
		cv_bridge::CvImageConstPtr ptrDepth;
	
		try 
		{
			ptrDepth = cv_bridge::toCvCopy(imageDepthMsg);
		}
		catch (cv_bridge::Exception& e)
		{
			ROS_ERROR("cv_bridge exception: %s", e.what());
			return;
		}
	
		int c_x = ptrDepth->image.cols/2;
		int c_y = ptrDepth->image.rows/2;
	
		cv::Point2f c(camInfoMsg->K[2], camInfoMsg->K[5]);
		cv::Point2f f(camInfoMsg->K[0], camInfoMsg->K[4]);

	float depth_value[] = {ptrDepth->image.at<float>(80, 80), ptrDepth->image.at<float>(80, 560), ptrDepth->image.at<float>(400, 320)}; 
        pcl::PointXYZ points[3] = {	pcl::PointXYZ(((float)80-c.x)*depth_value[0]/f.x, ((float)80-c.y)*depth_value[0]/f.y, depth_value[0]), 
									pcl::PointXYZ(((float)80-c.x)*depth_value[1]/f.x, ((float)560-c.y)*depth_value[1]/f.y, depth_value[1]), 
									pcl::PointXYZ(((float)400-c.x)*depth_value[2]/f.x, ((float)320-c.y)*depth_value[2]/f.y, depth_value[2])   };

	 int suitable_points_found = 3;

     const sensor_msgs::ImageConstPtr& imageDepthMsg,
                    const sensor_msgs::CameraInfoConstPtr& camInfoMsg
        if(suitable_points_found == 3) {
            //ROS_INFO("(%f, %f, %f), (%f, %f, %f), (%f, %f, %f)", points[0].x, points[0].y, points[0].z, points[1].x, points[1].y, points[1].z, points[2].x, points[2].y, points[2].z);

            pcl::PointCloud<pcl::PointXYZ> plane_points;
            for(int i = 0; i < 3; i++) plane_points.push_back(points[i]);

            Eigen::Quaternion<double> quat(imu_msg->orientation.x, imu_msg->orientation.y, imu_msg->orientation.z, imu_msg->orientation.w);
            Eigen::Transform<double, 3, Eigen::Affine> quad_rot_tranform(quat.toRotationMatrix());

            // Use Eigen only (no PCL) solution.
            pcl::PointCloud<pcl::PointXYZ> plane_points_transformed;
            pcl::transformPointCloud(plane_points, plane_points_transformed, quad_rot_tranform);

            sensor_msgs::PointCloud plane_points_msg;
            plane_points_msg.header = header_;
            geometry_msgs::Point32 p32;
            p32.x = points[0].x;
            p32.y = points[0].y;
            p32.z = points[0].z;
            plane_points_msg.points.push_back(p32);
            p32.x = points[1].x;
            p32.y = points[1].y;
            p32.z = points[1].z;
            plane_points_msg.points.push_back(p32);
            p32.x = points[2].x;
            p32.y = points[2].y;
            p32.z = points[2].z;
            plane_points_msg.points.push_back(p32);

            plane_points_pub_.publish(plane_points_msg);

            sensor_msgs::PointCloud plane_points_transformed_msg;
            plane_points_transformed_msg.header = header_;
            p32.x = plane_points_transformed[0].x;
            p32.y = plane_points_transformed[0].y;
            p32.z = plane_points_transformed[0].z;
            plane_points_transformed_msg.points.push_back(p32);
            p32.x = plane_points_transformed[1].x;
            p32.y = plane_points_transformed[1].y;
            p32.z = plane_points_transformed[1].z;
            plane_points_transformed_msg.points.push_back(p32);
            p32.x = plane_points_transformed[2].x;
            p32.y = plane_points_transformed[2].y;
            p32.z = plane_points_transformed[2].z;
            plane_points_transformed_msg.points.push_back(p32);

            plane_points_transformed_pub_.publish(plane_points_transformed_msg);

            header_.seq++;

            Eigen::Hyperplane<double, 3> plane = Eigen::Hyperplane<double, 3>::Through( Eigen::Vector3d(plane_points_transformed[0].x, plane_points_transformed[0].y, plane_points_transformed[0].z),
                                                                                        Eigen::Vector3d(plane_points_transformed[1].x, plane_points_transformed[1].y, plane_points_transformed[1].z),
                                                                                        Eigen::Vector3d(plane_points_transformed[2].x, plane_points_transformed[2].y, plane_points_transformed[2].z));

            Eigen::Hyperplane<double, 3> plane2 = Eigen::Hyperplane<double, 3>::Through( Eigen::Vector3d(points[0].x, points[0].y, points[0].z),
                                                                                        Eigen::Vector3d(points[1].x, points[1].y, points[1].z),
                                                                                        Eigen::Vector3d(points[2].x, points[2].y, points[2].z));
            double height = lot.intersection(plane);
            double height2 = lot.intersection(plane2);
            ROS_INFO("Height: %f, Rotated: %f", height2, height);
        }
		//ROS_INFO("DEPTH: %f, %f, %f", p1_depth, p2_depth, p3_depth);
	}
}*/

#include <visual_altimeter/BasicVisualAltimeter.h>
#include <visual_altimeter/AdvancedVisualAltimeter.h>
#include <visual_altimeter/BasicVisualPlaneAltimeter.h>
#include <visual_altimeter/DataFusionAltimeter.h>

VisualAltimeter* visual_altimeter_;

int main(int argc, char **argv)
{
    ros::init(argc, argv, "visual_altimeter_node");
    visual_altimeter_ = new AdvancedVisualAltimeter();

    ROS_INFO("Initializing visual altimeter...");
    try
    {
        visual_altimeter_->init(ros::NodeHandle(), ros::NodeHandle("~");
    }
    catch(std::exception &e)
    {
        ROS_ERROR("Error: %s", e.what());
        return -1;
    }

    visual_altimeter_->run();

    delete visual_altimeter_;

    /*header_.frame_id = "mikrokopter";
    header_.seq = 0;

    lot = Eigen::ParametrizedLine<double, 3>::Through(Eigen::Vector3d(0, 0, 0), Eigen::Vector3d(0, 0, 1));

	ros::init(argc, argv, "visual_altimeter_node");

	ros::NodeHandle nh;
	ros::NodeHandle pnh("~");

	std::string measurement_mode = "SIMPLE_PLANE";

	std::string camera_ns = nh.resolveName("camera");
	std::string depth_topic = ros::names::clean(camera_ns + "/depth/image");
	std::string info_topic = ros::names::clean(camera_ns + "/rgb/camera_info");
	
	std::string mikrokopter_ns = nh.resolveName("mikrokopter");
	std::string imu_topic = ros::names::clean(mikrokopter_ns + "/imu");

	ROS_INFO("depth topic: %s", depth_topic.c_str());
	ROS_INFO("info topic: %s", info_topic.c_str());
	ROS_INFO("imu topic: %s", imu_topic.c_str());

	image_transport::ImageTransport it(nh);

	image_transport::SubscriberFilter imageDepthSub_;
	message_filters::Subscriber<sensor_msgs::CameraInfo> cameraInfoSub_;
	message_filters::Subscriber<sensor_msgs::Imu> imuSub_;

	typedef message_filters::sync_policies::ApproximateTime<
			sensor_msgs::Image,
			sensor_msgs::CameraInfo> RGBDSyncPolicy;
	message_filters::Synchronizer<RGBDSyncPolicy> *rgbd_sync;

	typedef message_filters::sync_policies::ApproximateTime<
			sensor_msgs::Image,
			sensor_msgs::CameraInfo, 
			sensor_msgs::Imu> RGBDIMUSyncPolicy;
	message_filters::Synchronizer<RGBDIMUSyncPolicy> *rgbd_imu_sync;

	try 
	{
		imageDepthSub_.subscribe(it, depth_topic, 1, image_transport::TransportHints("raw"));
		cameraInfoSub_.subscribe(nh, info_topic, 10);
		rgbd_sync = new message_filters::Synchronizer<RGBDSyncPolicy>(RGBDSyncPolicy(10), imageDepthSub_, cameraInfoSub_);
	} 
	catch(std::exception& e) {
		ROS_INFO("%s", e.what());
		return -1;
	}
	
	if(measurement_mode == "SIMPLE_PLANE") {
		try
		{
			imuSub_.subscribe(nh, imu_topic, 1);
		}
		catch(std::exception& e) {
			ROS_INFO("%s", e.what());
			return -1;
		}
		imu_message_cache.connectInput(imuSub_);
		rgbd_sync->registerCallback(boost::bind(simple_plane_callback, _1, _2));
	} 
	else {
		rgbd_sync->registerCallback(boost::bind(center_average_callback, _1, _2));
	}

	visual_height_pub_ = nh.advertise<visual_altimeter::VisualHeightV1>("altimeter/height", 10);
    lot_pose_pub_ = nh.advertise<geometry_msgs::PoseStamped>("altimeter/lot_pose", 10);

    plane_points_pub_ = nh.advertise<sensor_msgs::PointCloud>("altimeter/plane_points", 10);
    plane_points_transformed_pub_ = nh.advertise<sensor_msgs::PointCloud>("altimeter/plane_points_transformed", 10);

    ros::spin();*/
}
